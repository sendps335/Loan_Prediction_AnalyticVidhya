# -*- coding: utf-8 -*-
"""Loan.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rkxTCiRBgxL1ZkmxFf0VXTG7vOpuCXGv
"""

import pandas as pd
import numpy as np
import seaborn as sns
from matplotlib import pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import cross_val_score
from sklearn.metrics import accuracy_score,f1_score
from sklearn.linear_model import LogisticRegression

df=pd.read_csv("/content/train_ctrUa4K.csv")
df1=pd.read_csv("/content/sample_submission_49d68Cx.csv")
df.info()

df.head()

useless=["Loan_ID"]
df.drop(useless,axis=1,inplace=True)

df.head()

"""#EDA
#Visualization of Various Features with the Output
"""

boolean_category=['Gender','Married','Education','Self_Employed','Loan_Amount_Term','Credit_History','Property_Area']
int_category=['ApplicantIncome','CoapplicantIncome','LoanAmount']

print(boolean_category)
print(int_category)

fig,axes=plt.subplots(4,2,figsize=(12,15))
for index,column in enumerate(boolean_category):
  row,col=index//2,index%2
  sns.countplot(x=column,data=df,hue='Loan_Status',ax=axes[row,col])
plt.subplots_adjust(hspace=1)

fig,axes=plt.subplots(1,3,figsize=(17,5))
for index,column in enumerate(int_category):
  sns.boxplot(y=column,x='Loan_Status',data=df,ax=axes[index])
plt.subplots_adjust(hspace=2)

df_encoded=pd.get_dummies(df,drop_first=True)
y=df_encoded["Loan_Status_Y"]
x=df_encoded.drop('Loan_Status_Y',axis=1)

"""#TEST SET
#The Real One Given in Hackathon
"""



"""#SPLITING OF THE TRAINING SET
#Training Set and the Cross-Validation Set
"""

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.15,stratify=y,random_state=42)
imp=SimpleImputer(strategy='mean')
imp_train=imp.fit(x_train)
x_train=imp_train.transform(x_train)
x_test=imp_train.transform(x_test)
x_train

#print(x_train)
#print(y_train)
y_train.head()

"""TRYING LOGISTIC REGRESSION"""

train_acc=[]
test_acc=[]
train_f1=[]
test_f1=[]
threshold=[]
for i in np.arange(0.05,0.95,0.05):
  log_md=LogisticRegression(solver="liblinear")
  log_md.fit(x_train,y_train)
  y_pred_thre=log_md.predict_proba(x_train)[:,1]
  y_pred=(y_pred_thre > i).astype(int)

  train_a=accuracy_score(y_train,y_pred)
  train_f=f1_score(y_train,y_pred)

  y_pred_thre=log_md.predict_proba(x_test)[:,1]
  y_pred=(y_pred_thre > i).astype(int)

  test_a=accuracy_score(y_test,y_pred)
  test_f=f1_score(y_test,y_pred)

  train_acc.append(train_a)
  train_f1.append(train_f)
  test_acc.append(test_a)
  test_f1.append(test_f)
  threshold.append(i)

Threshold_log_md = {"Training Accuracy": train_acc, "Test Accuracy": test_acc, "Training F1": train_f1, "Test F1":test_f1, "Decision Threshold": threshold}
Threshold_logreg_df = pd.DataFrame.from_dict(Threshold_log_md)
plot_df=Threshold_logreg_df.melt('Decision Threshold',var_name='Metrics',value_name="Values")
fig,ax=plt.subplots(figsize=(15,5))
sns.pointplot(x="Decision Threshold", y="Values",hue="Metrics", data=plot_df,ax=ax)

thresh = 0.45 
y_pred_test_thresh = log_md.predict_proba(x_test)[:,1]
y_pred=(y_pred_test_thresh > thresh).astype(int) 
print("Test Accuracy: ",accuracy_score(y_test,y_pred))
print("Test F1 Score: ",f1_score(y_test,y_pred))
print("Confusion Matrix on Test Data")
pd.crosstab(y_test, y_pred, rownames=['True'], colnames=['Predicted'], margins=True)

df2=pd.read_csv('/content/test_lAUu6dG.csv')
kk=df2["Loan_ID"]
kkk=['Loan_ID']
df2.drop(kkk,axis=1,inplace=True)
df22=pd.get_dummies(df2,drop_first=True)
df22.head()

x_test_real=imp_train.transform(df22)

log_md=LogisticRegression(solver='liblinear')
log_md.fit(x_train,y_train)
y_thre_real=log_md.predict_proba(x_test_real)[:,1]
y_pred_real=(y_thre_real > 0.45).astype(int)

y_pred_real

y_pred_real_ss=[]
for i in y_pred_real:
  if(i==1):
    y_pred_real_ss.append('Y')
  else:
    y_pred_real_ss.append('N')

dd={}
dd['Loan_ID']=kk
dd['Loan_Status']=y_pred_real_ss
df_real=pd.DataFrame(dd)

df3=pd.read_csv('/content/sample_submission_49d68Cx.csv')
df_real.head()

df_real.to_csv("Predicted_Loan_Test.csv")